Task #1

We are developing a new feature to display tables in the app. Weâ€™re going to use a third-party library to render a table, but it expects a different data format compared to what we receive from the server. Below are the examples of what the library expects (Sample A) and what we receive from the server (Sample B).
Sample A. Expected JSON for the library
{
  "headers": ["Sample Name", "Height", "Weight"],
  "rows": [
    ["Sample A", 543, 19.1],
    ["Sample B", 423, 11],
    ["Sample C", 646, 12.5]
  ]
}
Sample B. Actual JSON from the server
{
  "columns": [
    {
      "header": {
        "title": "Sample Name",
        "key": "name"
      },
      "data": ["Sample A", "Sample B", "Sample C"]
    },
    {
      "header": {
        "title": "Height",
        "key": "height"
      },
      "data": [543, 423, 646]
    },
    {
      "header": {
        "title": "Weight",
        "key": "weight"
      },
      "data": [19.1, 11, 12.5]
    }
  ]
}
Your task

Write a pure function that converts a JSON object from the structure in Sample B to the structure in Sample A. In practice, there can be any number of rows and columns.
Task #2

Create another pure function to extract records from the server data (Sample B) as an array of objects, without headers, like this:
[
  {
    "name": "Sample A",
    "height": 543,
    "weight": 19.1
  },
  {
    "name": "Sample B",
    "height": 423,
    "weight": 11
  },
  {
    "name": "Sample C",
    "height": 646,
    "weight": 12.5
  }
]

Task #3

Render the table using the data from Sample A on the screen. Use any tool of your choice: Angular, React, jQuery, vanilla JS, etc., and any development environment you feel comfortable with.



app.component.ts
--------------------
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  title = 'practice-angular';
  mockData: any = {
    "columns": [
      {
        "header": {
          "title": "Sample Name",
          "key": "name"
        },
        "data": ["Sample A", "Sample B", "Sample C"]
      },
      {
        "header": {
          "title": "Height",
          "key": "height"
        },
        "data": [543, 423, 646]
      },
      {
        "header": {
          "title": "Weight",
          "key": "weight"
        },
        "data": [19.1, 11, 12.5]
      }
    ]
  };
  tableData: any;


  ngOnInit(): void {
    this.tableData = this.convertData(this.mockData);
  }

  convertData(mockData: any) {
    let tableData: any = {
      "headers": [],
      "rows": []
    };
    if (mockData && mockData.columns && mockData.columns.length) {
      mockData.columns.forEach((col: any, rowIndex: number) => {
        tableData.headers.push(col.header?.title);
        // now for each column we need to iterate over data array and push it to rows array
        col.data.forEach((dataItem: any, dataItemIndex: number) => {
          // if rows array does not have an entry for this index, create one
          if (!tableData.rows[dataItemIndex]) {
            tableData.rows[dataItemIndex] = [];
          }
          tableData.rows[dataItemIndex][rowIndex] = dataItem;
        });
      });
    }

    return tableData;
  }



}
